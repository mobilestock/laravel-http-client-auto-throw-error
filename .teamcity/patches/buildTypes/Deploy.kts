package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.buildSteps.dockerCommand
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'Deploy'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("Deploy")) {
    expectSteps {
        script {
            name = "ECR Login"
            id = "login"
            scriptContent = "docker run --rm -e AWS_ACCESS_KEY_ID=%env.AWS_ACCESS_KEY_ID% -e AWS_SECRET_ACCESS_KEY=%env.AWS_SECRET_ACCESS_KEY% amazon/aws-cli ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin %env.CONTAINER_REGISTRY%"
        }
        script {
            name = "[build] lib"
            id = "build_1"
            scriptContent = "docker build -t backend-shared:latest ./shared"
        }
        dockerCommand {
            name = "[build] adm-api"
            id = "adm_api"
            enabled = false
            commandType = build {
                source = file {
                    path = "apps/adm-api/Dockerfile"
                }
                namesAndTags = "%env.CONTAINER_REGISTRY%adm-api:latest"
            }
        }
        dockerCommand {
            name = "[push] adm-api"
            id = "push"
            enabled = false
            commandType = push {
                namesAndTags = "%env.CONTAINER_REGISTRY%adm-api"
            }
        }
        dockerCommand {
            name = "[build] adm-cli"
            id = "build_adm-cli"
            enabled = false
            commandType = build {
                source = file {
                    path = "apps/adm-api/Dockerfile.cli"
                }
                namesAndTags = "%env.CONTAINER_REGISTRY%adm-cli:latest"
            }
        }
        dockerCommand {
            name = "[push] adm-cli"
            id = "push_adm-cli"
            enabled = false
            commandType = push {
                namesAndTags = "%env.CONTAINER_REGISTRY%adm-cli"
            }
        }
        dockerCommand {
            name = "[build] lookpay-api"
            id = "build_lookpay_api"
            commandType = build {
                source = file {
                    path = "apps/lookpay-api/Dockerfile"
                }
                namesAndTags = """
                    lookpay-api:latest
                    %env.CONTAINER_REGISTRY%lookpay-api:latest
                """.trimIndent()
            }
        }
        dockerCommand {
            name = "[push] lookpay-api"
            id = "push_lookpay_api"
            commandType = push {
                namesAndTags = "%env.CONTAINER_REGISTRY%lookpay-api:latest"
                removeImageAfterPush = false
            }
        }
        dockerCommand {
            name = "[build] load-balancer"
            id = "build_load_balancer"
            commandType = build {
                source = file {
                    path = "apps/load-balancer/Dockerfile"
                }
                namesAndTags = "%env.CONTAINER_REGISTRY%load-balancer:latest"
            }
        }
        dockerCommand {
            name = "[push] load-balancer"
            id = "push_load_balancer"
            commandType = push {
                namesAndTags = "%env.CONTAINER_REGISTRY%load-balancer:latest"
            }
        }
        script {
            name = "[Deploy] Deploy to Portainer"
            id = "deploy"
            scriptContent = "powershell -C Invoke-WebRequest -Uri %env.PORTAINER_STACK_WEBHOOK% -Method POST"
            formatStderrAsError = true
        }
        script {
            name = "[Deploy] Notification"
            id = "notification"
            executionMode = BuildStep.ExecutionMode.ALWAYS
            scriptContent = """
                println("https://api.telegram.org/bot%env.TELEGRAM_BOT_TOKEN%/sendMessage")
                
                val payload = "{\"chat_id\": \"%env.TELEGRAM_CHAT_ID%\", \"text\": \"O build no %teamcity.projectName% retornou TESTE."\", \"disable_notification\": true}"
                val url = "https://api.telegram.org/bot%env.TELEGRAM_BOT_TOKEN%/sendMessage"
                
                val process = ProcessBuilder(
                    "curl", "-X", "POST", "-H", "Content-Type: application/json", "-d", payload, url
                ).start()
                
                process.inputStream.bufferedReader().use {
                    println(it.readText())
                }
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(11) {
            executionMode = BuildStep.ExecutionMode.RUN_ONLY_ON_FAILURE
            clearConditions()
            scriptContent = """
                #!/bin/bash
                
                MESSAGE="O build %system.build.number% falhou ao tentar fazer o deploy."
                
                curl -X POST -H 'Content-Type: application/json' -d "{\"chat_id\": \"%env.TELEGRAM_CHAT_ID%\", \"text\": \"${'$'}MESSAGE\", \"disable_notification\": true}" https://api.telegram.org/bot%env.TELEGRAM_BOT_TOKEN%/sendMessage
            """.trimIndent()
        }
    }
}
